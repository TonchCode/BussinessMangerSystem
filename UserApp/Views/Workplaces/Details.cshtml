@using X.PagedList;
@using X.PagedList.Mvc.Core;
@using DataTransferObjects.DTOs;
@model DataTransferObjects.DTOs.Workplace

@{
    ViewData["Title"] = "Details";
}

<h1>@ViewData["Title"]</h1>

<div>
    <h4>Workplace</h4>
    <hr />
    <dl class="row">
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Id)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Id)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Name)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Name)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.City)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.City)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Holder)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Holder)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.DateCreated)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.DateCreated)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.RatingWithStars)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.RatingWithStars)
        </dd>
    </dl>
</div>
<div>
    @Html.ActionLink("Edit Workplace", "Edit", new { id = Model.Id }) |
    <a asp-action="Index">Back to List</a>
</div>


@{
    PagedList<Job> jobs = ViewData["List<Jobs>"] as PagedList<Job>;
}

<p></p><p></p>
<h1>Jobs at Workplace</h1>
<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => jobs.FirstOrDefault().Id)
            </th>
            <th>
                @Html.DisplayNameFor(model => jobs.FirstOrDefault().Title)
            </th>
            <th>
                @Html.DisplayNameFor(model => jobs.FirstOrDefault().MinSalary)
            </th>
            <th>
                @Html.DisplayNameFor(model => jobs.FirstOrDefault().MinHours)
            </th>
            <th>
                @Html.DisplayNameFor(model => jobs.FirstOrDefault().IsRemoteAvailable)
            </th>
            <th>
                @Html.DisplayNameFor(model => jobs.FirstOrDefault().Description)
            </th>
            <th>
                @Html.DisplayNameFor(model => jobs.FirstOrDefault().JobCreationDate)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in jobs)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.Id)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Title)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.MinSalary)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.MinHours)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.IsRemoteAvailable)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Description)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.JobCreationDate)
                </td>
                <td>
                    @Html.ActionLink("Edit", "Edit", "Jobs", new { id = item.Id }) |
                    @Html.ActionLink("Details", "Details", "Jobs", new { id = item.Id }) 
                </td>
            </tr>
        }
    </tbody>
</table>

@Html.PagedListPager((IPagedList)jobs, page => Url.Action("Details", new
    {
        id = Model.Id,
        page = page,
        searchfor = Context.Request.Query["searchfor"],
        searchby = @Context.Request.Query["searchby"]
    }),
    new PagedListRenderOptions { LiElementClasses = new string[] { "page-item" }, PageClasses = new string[] { "page-link" } })
